@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Bishop {
  + Bishop(ChessPiece): 
  + Bishop(Color, int, int, boolean): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class ChessBoard {
  + ChessBoard(): 
  - tileBoard: ChessPiece[][]
  + getPiecesByColor(Color): ArrayList<ChessPiece>
  + movePiece(int, int, int, int): void
  + copyBoard(ChessPiece[][]): ChessPiece[][]
  + setPieceAt(int, int, ChessPiece): void
  + getPieceAt(int, int): ChessPiece
  + resetHighlight(): void
  + move(int, int, int, int): void
  + isOccupied(int, int): boolean
  + initialize(boolean): void
  + resetBooleanPawn(boolean): void
  + removePieceAt(int, int): void
  + getKing(boolean): King
   tileBoard: ChessPiece[][]
}
class ChessBoardView {
  + ChessBoardView(boolean): 
  - promotionView(ChessPiece, int, int): void
  + mouseClicked(MouseEvent): void
  + mouseEntered(MouseEvent): void
  + mousePressed(MouseEvent): void
  + drawGrid(): void
  - promoteInto(JDialog, Pawn, int, int, String, String): void
  - removeSquare(int, int): void
  + mouseExited(MouseEvent): void
  + displayBoard(): void
  + mouseReleased(MouseEvent): void
  - castling(int, int, int, int, int, int, int): void
}
class ChessPiece {
  + ChessPiece(String, Color, int, int, boolean): 
  # color: Color
  - row: int
  - whitePiecesAtBottom: boolean
  - pieceName: String
  - col: int
  # captured: boolean
  + canMove(int, int, ChessPiece[][]): boolean
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
   col: int
   color: Color
   row: int
   pieceName: String
   whitePiecesAtBottom: boolean
   white: boolean
   captured: boolean
}
class GameController {
  + GameController(ChessBoardView): 
  + startGame(): void
}
class King {
  + King(Color, int, int, boolean): 
  + King(ChessPiece): 
  - hasMoved: boolean
  + isInCheck(boolean, ChessPiece[][]): boolean
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
   hasMoved: boolean
}
class Knight {
  + Knight(Color, int, int, boolean): 
  + Knight(ChessPiece): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class Pawn {
  + Pawn(Color, int, int, boolean): 
  + Pawn(ChessPiece): 
  - hasJustMoveDouble: boolean
  - possiblesMovesTurn(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): ArrayList<int[]>
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
  - descent(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): void
  - climb(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): void
  + promotePawn(Pawn, int, int, String, ChessPiece[][]): void
   hasJustMoveDouble: boolean
}
class Player {
  + Player(): 
  + mouseEntered(MouseEvent): void
  + mouseExited(MouseEvent): void
  + mousePressed(MouseEvent): void
  + mouseReleased(MouseEvent): void
  + displayPlayer(): void
  + createAndShowGUI(): void
  + mouseClicked(MouseEvent): void
}
class Queen {
  + Queen(Color, int, int, boolean): 
  + Queen(ChessPiece): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class RegleDuJeu {
  + RegleDuJeu(): 
  + isCheckMate(boolean, ChessPiece[][], ChessBoard): boolean
  + isADraw(boolean, ChessBoard): boolean
}
class Rook {
  + Rook(Color, int, int, boolean): 
  + Rook(ChessPiece): 
  - hasMoved: boolean
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
   hasMoved: boolean
}

Bishop          -[#000082,plain]-^  ChessPiece     
ChessBoard      -[#595959,dashed]->  Bishop         : "«create»"
ChessBoard     "1" *-[#595959,plain]-> "tileBoard\n*" ChessPiece     
ChessBoard      -[#595959,dashed]->  ChessPiece     : "«create»"
ChessBoard      -[#595959,dashed]->  King           : "«create»"
ChessBoard      -[#595959,dashed]->  Knight         : "«create»"
ChessBoard      -[#595959,dashed]->  Pawn           : "«create»"
ChessBoard      -[#000082,plain]-^  Player         
ChessBoard      -[#595959,dashed]->  Queen          : "«create»"
ChessBoard      -[#595959,dashed]->  Rook           : "«create»"
ChessBoardView "1" *-[#595959,plain]-> "board\n1" ChessBoard     
ChessBoardView  -[#595959,dashed]->  ChessBoard     : "«create»"
ChessBoardView "1" *-[#595959,plain]-> "sourcePiece\n1" ChessPiece     
ChessBoardView  -[#000082,plain]-^  Player         
GameController "1" *-[#595959,plain]-> "chessBoardView\n1" ChessBoardView 
King            -[#000082,plain]-^  ChessPiece     
Knight          -[#000082,plain]-^  ChessPiece     
Pawn            -[#595959,dashed]->  Bishop         : "«create»"
Pawn            -[#000082,plain]-^  ChessPiece     
Pawn            -[#595959,dashed]->  Knight         : "«create»"
Pawn            -[#595959,dashed]->  Queen          : "«create»"
Pawn            -[#595959,dashed]->  Rook           : "«create»"
Player         "1" *-[#595959,plain]-> "chessBoardView\n1" ChessBoardView 
Player          -[#595959,dashed]->  ChessBoardView : "«create»"
Player         "1" *-[#595959,plain]-> "game\n1" GameController 
Player          -[#595959,dashed]->  GameController : "«create»"
Queen           -[#000082,plain]-^  ChessPiece     
Rook            -[#000082,plain]-^  ChessPiece     
@enduml
