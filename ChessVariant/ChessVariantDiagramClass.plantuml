@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Bishop {
  + Bishop(Color, int, int, boolean): 
  + Bishop(ChessPiece): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class ChessBoard {
  + ChessBoard(): 
  - tileBoard: ChessPiece[][]
  + initialize(boolean): void
  + setPieceAt(int, int, ChessPiece): void
  + getPiecesByColor(Color): ArrayList<ChessPiece>
  + move(int, int, int, int): void
  + movePiece(int, int, int, int): void
  + getKing(boolean): King
  + getPieceAt(int, int): ChessPiece
  + resetHighlight(): void
  + copyBoard(ChessPiece[][]): ChessPiece[][]
  + removePieceAt(int, int): void
  + isOccupied(int, int): boolean
   tileBoard: ChessPiece[][]
}
class ChessBoardView {
  + ChessBoardView(boolean): 
  + mouseClicked(MouseEvent): void
  + mouseExited(MouseEvent): void
  + drawGrid(): void
  - promotionView(ChessPiece, int, int): void
  + mouseEntered(MouseEvent): void
  - promoteInto(JDialog, Pawn, int, int, String, String): void
  + mousePressed(MouseEvent): void
  + removeSquare(int, int): void
  + displayBoard(): void
  + mouseReleased(MouseEvent): void
}
class ChessPiece {
  + ChessPiece(String, Color, int, int, boolean): 
  # color: Color
  - pieceName: String
  - row: int
  - col: int
  - whitePiecesAtBottom: boolean
  + setCaptured(): void
  + canMove(int, int, ChessPiece[][]): boolean
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
   col: int
   whitePiecesAtBottom: boolean
   color: Color
   white: boolean
   row: int
   pieceName: String
}
class GameController {
  + GameController(ChessBoardView): 
  + startGame(): void
}
class Imperatrice {
  + Imperatrice(ChessPiece): 
  + Imperatrice(Color, int, int, boolean): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class King {
  + King(ChessPiece): 
  + King(Color, int, int, boolean): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
  + isInCheck(boolean, ChessPiece[][]): boolean
}
class Knight {
  + Knight(ChessPiece): 
  + Knight(Color, int, int, boolean): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class Noctambule {
  + Noctambule(ChessPiece): 
  + Noctambule(Color, int, int, boolean): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
  - addDiagonalMoves(int, int, ChessPiece[][], ArrayList<int[]>): void
  - addHorizontalAndVerticalMoves(int, int, ChessPiece[][], ArrayList<int[]>): void
  + isValidCaptureOrEmpty(int, int, ChessPiece[][]): boolean
  + isOnBoard(int, int): boolean
}
class Pawn {
  + Pawn(ChessPiece): 
  + Pawn(Color, int, int, boolean): 
  - possiblesMovesTurn(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): ArrayList<int[]>
  - climb(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): void
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
  + promotePawn(Pawn, int, int, String, ChessPiece[][]): void
  - descent(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): void
}
class Player {
  + Player(): 
  + mouseReleased(MouseEvent): void
  + mousePressed(MouseEvent): void
  + mouseEntered(MouseEvent): void
  + mouseExited(MouseEvent): void
  + mouseClicked(MouseEvent): void
  + displayPlayer(): void
  + createAndShowGUI(): void
}
class Princesse {
  + Princesse(ChessPiece): 
  + Princesse(Color, int, int, boolean): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class Queen {
  + Queen(Color, int, int, boolean): 
  + Queen(ChessPiece): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class RegleDuJeu {
  + RegleDuJeu(): 
  + draw(boolean, ChessBoard): boolean
  + checkMate(boolean, ChessPiece[][], ChessBoard): boolean
}
class Rook {
  + Rook(Color, int, int, boolean): 
  + Rook(ChessPiece): 
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class Sauterelle {
  + Sauterelle(ChessPiece): 
  + Sauterelle(Color, int, int, boolean): 
  + isPathClear(int, int, int, int, ChessPiece[][]): boolean
  + isValidMove(int, int, int, int, ChessPiece[][]): boolean
  + isOnBoard(int, int): boolean
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
  - isJumpingOver(int, int, int, int, ChessPiece[][]): boolean
  + isValidCaptureOrEmpty(int, int, ChessPiece[][]): boolean
}

Bishop          -[#000082,plain]-^  ChessPiece     
ChessBoard      -[#595959,dashed]->  Bishop         : "«create»"
ChessBoard     "1" *-[#595959,plain]-> "tileBoard\n*" ChessPiece     
ChessBoard      -[#595959,dashed]->  ChessPiece     : "«create»"
ChessBoard      -[#595959,dashed]->  Imperatrice    : "«create»"
ChessBoard      -[#595959,dashed]->  King           : "«create»"
ChessBoard      -[#595959,dashed]->  Knight         : "«create»"
ChessBoard      -[#595959,dashed]->  Noctambule     : "«create»"
ChessBoard      -[#595959,dashed]->  Pawn           : "«create»"
ChessBoard      -[#000082,plain]-^  Player         
ChessBoard      -[#595959,dashed]->  Princesse      : "«create»"
ChessBoard      -[#595959,dashed]->  Queen          : "«create»"
ChessBoard      -[#595959,dashed]->  Rook           : "«create»"
ChessBoard      -[#595959,dashed]->  Sauterelle     : "«create»"
ChessBoardView  -[#595959,dashed]->  ChessBoard     : "«create»"
ChessBoardView "1" *-[#595959,plain]-> "board\n1" ChessBoard     
ChessBoardView "1" *-[#595959,plain]-> "sourcePiece\n1" ChessPiece     
ChessBoardView  -[#000082,plain]-^  Player         
GameController "1" *-[#595959,plain]-> "chessBoardView\n1" ChessBoardView 
Imperatrice     -[#000082,plain]-^  ChessPiece     
King            -[#000082,plain]-^  ChessPiece     
Knight          -[#000082,plain]-^  ChessPiece     
Noctambule      -[#000082,plain]-^  ChessPiece     
Pawn            -[#595959,dashed]->  Bishop         : "«create»"
Pawn            -[#000082,plain]-^  ChessPiece     
Pawn            -[#595959,dashed]->  Imperatrice    : "«create»"
Pawn            -[#595959,dashed]->  Knight         : "«create»"
Pawn            -[#595959,dashed]->  Noctambule     : "«create»"
Pawn            -[#595959,dashed]->  Princesse      : "«create»"
Pawn            -[#595959,dashed]->  Queen          : "«create»"
Pawn            -[#595959,dashed]->  Rook           : "«create»"
Pawn            -[#595959,dashed]->  Sauterelle     : "«create»"
Player         "1" *-[#595959,plain]-> "chessBoardView\n1" ChessBoardView 
Player          -[#595959,dashed]->  ChessBoardView : "«create»"
Player         "1" *-[#595959,plain]-> "game\n1" GameController 
Player          -[#595959,dashed]->  GameController : "«create»"
Princesse       -[#000082,plain]-^  ChessPiece     
Queen           -[#000082,plain]-^  ChessPiece     
Rook            -[#000082,plain]-^  ChessPiece     
Sauterelle      -[#000082,plain]-^  ChessPiece     
@enduml
