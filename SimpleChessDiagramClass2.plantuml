@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Bishop {
  + Bishop(Color, int, int, boolean):
  + Bishop(ChessPiece):
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class ChessBoard {
  + ChessBoard():
  - tileBoard: ChessPiece[][]
  + initialize(boolean): void
  + getPiecesByColor(Color): ArrayList<ChessPiece>
  + isOccupied(int, int): boolean
  + resetHighlight(): void
  + resetBooleanPawn(boolean): void
  + copyBoard(ChessPiece[][]): ChessPiece[][]
  + move(int, int, int, int): void
  + getKing(boolean): King
  + getPieceAt(int, int): ChessPiece
  + movePiece(int, int, int, int): void
  + setPieceAt(int, int, ChessPiece): void
  + removePieceAt(int, int): void
   tileBoard: ChessPiece[][]
}
class ChessBoardView {
  + ChessBoardView(boolean):
  - promoteInto(JDialog, Pawn, int, int, String, String): void
  - removeSquare(int, int): void
  + mouseEntered(MouseEvent): void
  + displayBoard(): void
  - promotionView(ChessPiece, int, int): void
  + mousePressed(MouseEvent): void
  + mouseClicked(MouseEvent): void
  + mouseReleased(MouseEvent): void
  - castling(int, int, int, int, int, int, int): void
  + drawGrid(): void
  + mouseExited(MouseEvent): void
}
class ChessPiece {
  + ChessPiece(String, Color, int, int, boolean):
  # captured: boolean
  - row: int
  - whitePiecesAtBottom: boolean
  - pieceName: String
  # color: Color
  - col: int
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
  + canMove(int, int, ChessPiece[][]): boolean
   color: Color
   whitePiecesAtBottom: boolean
   captured: boolean
   pieceName: String
   col: int
   row: int
   white: boolean
}
class Game {
  + Game():
  + mouseReleased(MouseEvent): void
  + displayGame(): void
  + createAndShowGUI(): void
  + mouseEntered(MouseEvent): void
  + mousePressed(MouseEvent): void
  + mouseExited(MouseEvent): void
  + mouseClicked(MouseEvent): void
}
class GameController {
  + GameController(ChessBoardView):
  + startGame(): void
}
class GameRules {
  + GameRules():
  + isCheckMate(boolean, ChessPiece[][], ChessBoard): boolean
  + isADraw(boolean, ChessBoard): boolean
}
class King {
  + King(ChessPiece):
  + King(Color, int, int, boolean):
  - hasMoved: boolean
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
  + isInCheck(boolean, ChessPiece[][]): boolean
   hasMoved: boolean
}
class Knight {
  + Knight(Color, int, int, boolean):
  + Knight(ChessPiece):
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class Main {
  + Main():
  + main(String[]): void
}
class Pawn {
  + Pawn(Color, int, int, boolean):
  + Pawn(ChessPiece):
  - hasJustMoveDouble: boolean
  - descent(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): void
  - possiblesMovesTurn(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): ArrayList<int[]>
  + promotePawn(Pawn, int, int, String, ChessPiece[][]): void
  - climb(int, int, ChessPiece[][], ArrayList<int[]>, Boolean): void
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
   hasJustMoveDouble: boolean
}
class Queen {
  + Queen(ChessPiece):
  + Queen(Color, int, int, boolean):
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
}
class Rook {
  + Rook(Color, int, int, boolean):
  + Rook(ChessPiece):
  - hasMoved: boolean
  + possiblesMoves(int, int, ChessPiece[][]): ArrayList<int[]>
   hasMoved: boolean
}

Bishop          -[#000082,plain]-^  ChessPiece
ChessBoard      -[#595959,dashed]->  Bishop         : "«create»"
ChessBoard      -[#595959,dashed]->  ChessPiece     : "«create»"
ChessBoard     "1" *-[#595959,plain]-> "tileBoard\n*" ChessPiece
ChessBoard      -[#000082,plain]-^  Game
ChessBoard      -[#595959,dashed]->  King           : "«create»"
ChessBoard      -[#595959,dashed]->  Knight         : "«create»"
ChessBoard      -[#595959,dashed]->  Pawn           : "«create»"
ChessBoard      -[#595959,dashed]->  Queen          : "«create»"
ChessBoard      -[#595959,dashed]->  Rook           : "«create»"
ChessBoardView  -[#595959,dashed]->  ChessBoard     : "«create»"
ChessBoardView "1" *-[#595959,plain]-> "board\n1" ChessBoard
ChessBoardView "1" *-[#595959,plain]-> "sourcePiece\n1" ChessPiece
ChessBoardView  -[#000082,plain]-^  Game
Game            -[#595959,dashed]->  ChessBoardView : "«create»"
Game           "1" *-[#595959,plain]-> "chessBoardView\n1" ChessBoardView
Game           "1" *-[#595959,plain]-> "gameController\n1" GameController
Game            -[#595959,dashed]->  GameController : "«create»"
GameController "1" *-[#595959,plain]-> "chessBoardView\n1" ChessBoardView
King            -[#000082,plain]-^  ChessPiece
Knight          -[#000082,plain]-^  ChessPiece
Main            -[#595959,dashed]->  Game           : "«create»"
Pawn            -[#595959,dashed]->  Bishop         : "«create»"
Pawn            -[#000082,plain]-^  ChessPiece
Pawn            -[#595959,dashed]->  Knight         : "«create»"
Pawn            -[#595959,dashed]->  Queen          : "«create»"
Pawn            -[#595959,dashed]->  Rook           : "«create»"
Queen           -[#000082,plain]-^  ChessPiece
Rook            -[#000082,plain]-^  ChessPiece
@enduml
